name: Build and Push Docker image

on:
  push:
    branches:
      - main  # or any other branch you want to trigger the workflow

jobs:
  build_and_push:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Get short SHA
        id: identity
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: mvacstudio/${{ github.event.repository.name }}:latest, mvacstudio/${{ github.event.repository.name }}:${{ steps.identity.outputs.sha7 }}
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        if: ${{ success() }}
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: ">>> [${{ github.repository }}]\n:white_check_mark:  **container built and pushed**"
      - name: Fetch Workflow Run Details
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          script: |
            const runId = process.env.GITHUB_RUN_ID
            const repo = process.env.GITHUB_REPOSITORY
            const [owner, repoName] = repo.split('/')
            const { data } = await github.rest.actions.getWorkflowRun({
              owner,
              repo: repoName,
              run_id: runId
            })
            return `Error: ${data.conclusion}\nURL: ${data.html_url}`
          result-encoding: string
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        if: ${{ failure() }}
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: ">>> [${{ github.repository }}]\n:x:  **failed to build and push container**\n```${{ steps.fetch_workflow_run_details.outputs.result }}```"

  deploy_to_kubernetes:
    name: Deploy to Kubernetes
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Apply Kubernetes Configuration
        run: kubectl apply -f $GITHUB_WORKSPACE/.kube/
      - name: Remove Pods and Redeploy
        continue-on-error: true
        run: kubectl delete pods -l app=${{ github.event.repository.name }}
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        if: ${{ success() }}
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: ">>> [${{ github.repository }}]\n:white_check_mark:  **deployment complete**"
      - name: Fetch Workflow Run Details
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          script: |
            const runId = process.env.GITHUB_RUN_ID
            const repo = process.env.GITHUB_REPOSITORY
            const [owner, repoName] = repo.split('/')
            const { data } = await github.rest.actions.getWorkflowRun({
              owner,
              repo: repoName,
              run_id: runId
            })
            return data
          result-encoding: string
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        if: ${{ failure() }}
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: ">>> [${{ github.repository }}]\n:x:  **deployment failed**"

  update_protobuf_libraries:
    name: Update Protobuf Libraries
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Check If Any Protobuf Files Are Present
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "./.protobuf/*.proto"

      - name: Install AWS CLI
        if: steps.check_files.outputs.files_exists == 'true'
        run: pip install awscli

      - name: Configure AWS CLI
        if: steps.check_files.outputs.files_exists == 'true'
        env:
          LINODE_ACCESS_KEY: ${{ secrets.LINODE_DEV_LIBRARIES_KEY }}
          LINODE_SECRET_KEY: ${{ secrets.LINODE_DEV_LIBRARIES_SECRET }}
        run: |
          aws configure set aws_access_key_id $LINODE_ACCESS_KEY
          aws configure set aws_secret_access_key $LINODE_SECRET_KEY
          aws configure set default.region us-east-1  # Dummy region, Linode does not use this but AWS CLI requires it
          aws configure set default.output_format json

      - name: Deploy to Linode Object Storage
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          aws s3 cp ./.protobuf/ s3://dev.multivac.studio/${{ github.event.repository.name }}/ --exclude "*" --include "*.proto" --recursive --acl public-read --endpoint-url https://us-lax-1.linodeobjects.com