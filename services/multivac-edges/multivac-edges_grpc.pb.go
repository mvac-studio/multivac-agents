// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: multivac-edges.proto

package edges

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EdgeService_SaveEdge_FullMethodName               = "/edge.EdgeService/SaveEdge"
	EdgeService_GetEdges_FullMethodName               = "/edge.EdgeService/GetEdges"
	EdgeService_GetForwardEdges_FullMethodName        = "/edge.EdgeService/GetForwardEdges"
	EdgeService_DeleteEdge_FullMethodName             = "/edge.EdgeService/DeleteEdge"
	EdgeService_DeleteAllEdgesBySource_FullMethodName = "/edge.EdgeService/DeleteAllEdgesBySource"
	EdgeService_DeleteForwardEdges_FullMethodName     = "/edge.EdgeService/DeleteForwardEdges"
)

// EdgeServiceClient is the client API for EdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeServiceClient interface {
	// CreateEdge creates a new edge between two vertices
	SaveEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	// GetEdges returns all target edges for a given vertex
	GetEdges(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*EdgeCollection, error)
	// GetEdgesByTargetType returns all target edges for a given source vertex and target type
	GetForwardEdges(ctx context.Context, in *GetForwardEdgesRequest, opts ...grpc.CallOption) (*EdgeCollection, error)
	// DeleteEdge deletes an edge by its edge id
	DeleteEdge(ctx context.Context, in *DeleteEdgeRequest, opts ...grpc.CallOption) (*Edge, error)
	// DeleteEdgesBySource deletes all edges by source vertex
	DeleteAllEdgesBySource(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*EdgeCollection, error)
	// DeleteEdgesBySource deletes all edges by source vertex and target type
	DeleteForwardEdges(ctx context.Context, in *DeleteForwardEdgesRequest, opts ...grpc.CallOption) (*EdgeCollection, error)
}

type edgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeServiceClient(cc grpc.ClientConnInterface) EdgeServiceClient {
	return &edgeServiceClient{cc}
}

func (c *edgeServiceClient) SaveEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, EdgeService_SaveEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) GetEdges(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*EdgeCollection, error) {
	out := new(EdgeCollection)
	err := c.cc.Invoke(ctx, EdgeService_GetEdges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) GetForwardEdges(ctx context.Context, in *GetForwardEdgesRequest, opts ...grpc.CallOption) (*EdgeCollection, error) {
	out := new(EdgeCollection)
	err := c.cc.Invoke(ctx, EdgeService_GetForwardEdges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) DeleteEdge(ctx context.Context, in *DeleteEdgeRequest, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, EdgeService_DeleteEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) DeleteAllEdgesBySource(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*EdgeCollection, error) {
	out := new(EdgeCollection)
	err := c.cc.Invoke(ctx, EdgeService_DeleteAllEdgesBySource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeServiceClient) DeleteForwardEdges(ctx context.Context, in *DeleteForwardEdgesRequest, opts ...grpc.CallOption) (*EdgeCollection, error) {
	out := new(EdgeCollection)
	err := c.cc.Invoke(ctx, EdgeService_DeleteForwardEdges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeServiceServer is the server API for EdgeService service.
// All implementations must embed UnimplementedEdgeServiceServer
// for forward compatibility
type EdgeServiceServer interface {
	// CreateEdge creates a new edge between two vertices
	SaveEdge(context.Context, *Edge) (*Edge, error)
	// GetEdges returns all target edges for a given vertex
	GetEdges(context.Context, *Vertex) (*EdgeCollection, error)
	// GetEdgesByTargetType returns all target edges for a given source vertex and target type
	GetForwardEdges(context.Context, *GetForwardEdgesRequest) (*EdgeCollection, error)
	// DeleteEdge deletes an edge by its edge id
	DeleteEdge(context.Context, *DeleteEdgeRequest) (*Edge, error)
	// DeleteEdgesBySource deletes all edges by source vertex
	DeleteAllEdgesBySource(context.Context, *Vertex) (*EdgeCollection, error)
	// DeleteEdgesBySource deletes all edges by source vertex and target type
	DeleteForwardEdges(context.Context, *DeleteForwardEdgesRequest) (*EdgeCollection, error)
	mustEmbedUnimplementedEdgeServiceServer()
}

// UnimplementedEdgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeServiceServer struct {
}

func (UnimplementedEdgeServiceServer) SaveEdge(context.Context, *Edge) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEdge not implemented")
}
func (UnimplementedEdgeServiceServer) GetEdges(context.Context, *Vertex) (*EdgeCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdges not implemented")
}
func (UnimplementedEdgeServiceServer) GetForwardEdges(context.Context, *GetForwardEdgesRequest) (*EdgeCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForwardEdges not implemented")
}
func (UnimplementedEdgeServiceServer) DeleteEdge(context.Context, *DeleteEdgeRequest) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdge not implemented")
}
func (UnimplementedEdgeServiceServer) DeleteAllEdgesBySource(context.Context, *Vertex) (*EdgeCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllEdgesBySource not implemented")
}
func (UnimplementedEdgeServiceServer) DeleteForwardEdges(context.Context, *DeleteForwardEdgesRequest) (*EdgeCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForwardEdges not implemented")
}
func (UnimplementedEdgeServiceServer) mustEmbedUnimplementedEdgeServiceServer() {}

// UnsafeEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeServiceServer will
// result in compilation errors.
type UnsafeEdgeServiceServer interface {
	mustEmbedUnimplementedEdgeServiceServer()
}

func RegisterEdgeServiceServer(s grpc.ServiceRegistrar, srv EdgeServiceServer) {
	s.RegisterService(&EdgeService_ServiceDesc, srv)
}

func _EdgeService_SaveEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).SaveEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeService_SaveEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).SaveEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_GetEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vertex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).GetEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeService_GetEdges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).GetEdges(ctx, req.(*Vertex))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_GetForwardEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForwardEdgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).GetForwardEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeService_GetForwardEdges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).GetForwardEdges(ctx, req.(*GetForwardEdgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeService_DeleteEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).DeleteEdge(ctx, req.(*DeleteEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_DeleteAllEdgesBySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vertex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).DeleteAllEdgesBySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeService_DeleteAllEdgesBySource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).DeleteAllEdgesBySource(ctx, req.(*Vertex))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeService_DeleteForwardEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForwardEdgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeServiceServer).DeleteForwardEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeService_DeleteForwardEdges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeServiceServer).DeleteForwardEdges(ctx, req.(*DeleteForwardEdgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgeService_ServiceDesc is the grpc.ServiceDesc for EdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edge.EdgeService",
	HandlerType: (*EdgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveEdge",
			Handler:    _EdgeService_SaveEdge_Handler,
		},
		{
			MethodName: "GetEdges",
			Handler:    _EdgeService_GetEdges_Handler,
		},
		{
			MethodName: "GetForwardEdges",
			Handler:    _EdgeService_GetForwardEdges_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _EdgeService_DeleteEdge_Handler,
		},
		{
			MethodName: "DeleteAllEdgesBySource",
			Handler:    _EdgeService_DeleteAllEdgesBySource_Handler,
		},
		{
			MethodName: "DeleteForwardEdges",
			Handler:    _EdgeService_DeleteForwardEdges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multivac-edges.proto",
}
