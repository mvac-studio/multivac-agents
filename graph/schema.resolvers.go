package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"net/url"
	"strings"

	"multivac.network/services/agents/data"
	"multivac.network/services/agents/graph/model"
)

// CreateAgent is the resolver for the createAgent field.
func (r *mutationResolver) CreateAgent(ctx context.Context, input model.NewAgent) (*model.Agent, error) {
	agent := data.NewAgentDataStore()
	return agent.CreateAgent(&model.Agent{
		Name:        input.Name,
		Description: input.Description,
		Key:         url.PathEscape(strings.ToLower(input.Name)),
		Engine:      input.Engine,
		Prompt:      input.Prompt,
	})
}

// Agents is the resolver for the agents field.
func (r *queryResolver) Agents(ctx context.Context) ([]*model.Agent, error) {
	agents := data.NewAgentDataStore()
	return agents.RetrieveAgents()
}

// Engines is the resolver for the engines field.
func (r *queryResolver) Engines(ctx context.Context) ([]*model.Engine, error) {
	panic(fmt.Errorf("not implemented: Engines - engines"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
